// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.NewPostView = (function(_super) {
      __extends(NewPostView, _super);

      function NewPostView() {
        this.hideTopicDropdown = __bind(this.hideTopicDropdown, this);
        _ref = NewPostView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      NewPostView.prototype.initialize = function(options) {
        var _ref1;
        this.mode = options.mode || "inline";
        if ((_ref1 = this.mode) !== "tab" && _ref1 !== "inline") {
          throw new Error("invalid mode: " + this.mode);
        }
        this.course_settings = options.course_settings;
        this.maxNameWidth = 100;
        return this.topicId = options.topicId;
      };

      NewPostView.prototype.render = function() {
        var context;
        context = _.clone(this.course_settings.attributes);
        _.extend(context, {
          cohort_options: this.getCohortOptions(),
          mode: this.mode,
          form_id: this.mode + (this.topicId ? "-" + this.topicId : "")
        });
        if (this.mode === "tab") {
          context.topics_html = this.renderCategoryMap(this.course_settings.get("category_map"));
        }
        this.$el.html(_.template($("#new-post-template").html(), context));
        if (this.mode === "tab") {
          this.dropdownButton = this.$(".post-topic-button");
          this.topicMenu = this.$(".topic-menu-wrapper");
          this.hideTopicDropdown();
          this.setTopic(this.$("a.topic-title").first());
        }
        return DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "js-post-body");
      };

      NewPostView.prototype.renderCategoryMap = function(map) {
        var category_template, entry, entry_template, html, name, _i, _len, _ref1;
        category_template = _.template($("#new-post-menu-category-template").html());
        entry_template = _.template($("#new-post-menu-entry-template").html());
        html = "";
        _ref1 = map.children;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          name = _ref1[_i];
          if (name in map.entries) {
            entry = map.entries[name];
            html += entry_template({
              text: name,
              id: entry.id,
              is_cohorted: entry.is_cohorted
            });
          } else {
            html += category_template({
              text: name,
              entries: this.renderCategoryMap(map.subcategories[name])
            });
          }
        }
        return html;
      };

      NewPostView.prototype.getCohortOptions = function() {
        var user_cohort_id;
        if (this.course_settings.get("is_cohorted") && DiscussionUtil.isStaff()) {
          user_cohort_id = $("#discussion-container").data("user-cohort-id");
          return _.map(this.course_settings.get("cohorts"), function(cohort) {
            return {
              value: cohort.id,
              text: cohort.name,
              selected: cohort.id === user_cohort_id
            };
          });
        } else {
          return null;
        }
      };

      NewPostView.prototype.events = {
        "submit .forum-new-post-form": "createPost",
        "click .post-topic-button": "toggleTopicDropdown",
        "click .topic-menu-wrapper": "handleTopicEvent",
        "click .topic-filter-label": "ignoreClick",
        "keyup .topic-filter-input": DiscussionFilter.filterDrop,
        "change .post-option-input": "postOptionChange"
      };

      NewPostView.prototype.ignoreClick = function(event) {
        return event.stopPropagation();
      };

      NewPostView.prototype.postOptionChange = function(event) {
        var $optionElem, $target;
        $target = $(event.target);
        $optionElem = $target.closest(".post-option");
        if ($target.is(":checked")) {
          return $optionElem.addClass("is-enabled");
        } else {
          return $optionElem.removeClass("is-enabled");
        }
      };

      NewPostView.prototype.createPost = function(event) {
        var anonymous, anonymous_to_peers, body, follow, group, thread_type, title, url,
          _this = this;
        event.preventDefault();
        thread_type = this.$(".post-type-input:checked").val();
        title = this.$(".js-post-title").val();
        body = this.$(".js-post-body").find(".wmd-input").val();
        group = this.$(".js-group-select option:selected").attr("value");
        anonymous = false || this.$(".js-anon").is(":checked");
        anonymous_to_peers = false || this.$(".js-anon-peers").is(":checked");
        follow = false || this.$(".js-follow").is(":checked");
        url = DiscussionUtil.urlFor('create_thread', this.topicId);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            thread_type: thread_type,
            title: title,
            body: body,
            anonymous: anonymous,
            anonymous_to_peers: anonymous_to_peers,
            auto_subscribe: follow,
            group_id: group
          },
          error: DiscussionUtil.formErrorHandler(this.$(".post-errors")),
          success: function(response, textStatus) {
            var thread;
            thread = new Thread(response['content']);
            DiscussionUtil.clearFormErrors(_this.$(".post-errors"));
            _this.$el.hide();
            _this.$(".js-post-title").val("").attr("prev-text", "");
            _this.$(".js-post-body textarea").val("").attr("prev-text", "");
            _this.$(".wmd-preview p").html("");
            return _this.collection.add(thread);
          }
        });
      };

      NewPostView.prototype.toggleTopicDropdown = function(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.menuOpen) {
          return this.hideTopicDropdown();
        } else {
          return this.showTopicDropdown();
        }
      };

      NewPostView.prototype.showTopicDropdown = function() {
        this.menuOpen = true;
        this.dropdownButton.addClass('dropped');
        this.topicMenu.show();
        $(".form-topic-drop-search-input").focus();
        $("body").bind("click", this.hideTopicDropdown);
        return this.maxNameWidth = this.dropdownButton.width() - 40;
      };

      NewPostView.prototype.hideTopicDropdown = function() {
        this.menuOpen = false;
        this.dropdownButton.removeClass('dropped');
        this.topicMenu.hide();
        return $("body").unbind("click", this.hideTopicDropdown);
      };

      NewPostView.prototype.handleTopicEvent = function(event) {
        event.preventDefault();
        event.stopPropagation();
        return this.setTopic($(event.target));
      };

      NewPostView.prototype.setTopic = function($target) {
        if ($target.data('discussion-id')) {
          this.topicText = $target.html();
          this.topicText = this.getFullTopicName($target);
          this.topicId = $target.data('discussion-id');
          this.setSelectedTopic();
          if ($target.data("cohorted")) {
            $(".js-group-select").prop("disabled", false);
          } else {
            $(".js-group-select").val("");
            $(".js-group-select").prop("disabled", true);
          }
          return this.hideTopicDropdown();
        }
      };

      NewPostView.prototype.setSelectedTopic = function() {
        return this.$(".js-selected-topic").html(this.fitName(this.topicText));
      };

      NewPostView.prototype.getFullTopicName = function(topicElement) {
        var name;
        name = topicElement.html();
        topicElement.parents('.topic-submenu').each(function() {
          return name = $(this).siblings('.topic-title').text() + ' / ' + name;
        });
        return name;
      };

      NewPostView.prototype.getNameWidth = function(name) {
        var test, width;
        test = $("<div>");
        test.css({
          "font-size": this.dropdownButton.css('font-size'),
          opacity: 0,
          position: 'absolute',
          left: -1000,
          top: -1000
        });
        $("body").append(test);
        test.html(name);
        width = test.width();
        test.remove();
        return width;
      };

      NewPostView.prototype.fitName = function(name) {
        var partialName, path, rawName, width, x;
        width = this.getNameWidth(name);
        if (width < this.maxNameWidth) {
          return name;
        }
        path = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = name.split("/");
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            x = _ref1[_i];
            _results.push(x.replace(/^\s+|\s+$/g, ""));
          }
          return _results;
        })();
        while (path.length > 1) {
          path.shift();
          partialName = gettext("…") + " / " + path.join(" / ");
          if (this.getNameWidth(partialName) < this.maxNameWidth) {
            return partialName;
          }
        }
        rawName = path[0];
        name = gettext("…") + " / " + rawName;
        while (this.getNameWidth(name) > this.maxNameWidth) {
          rawName = rawName.slice(0, rawName.length - 1);
          name = gettext("…") + " / " + rawName + " " + gettext("…");
        }
        return name;
      };

      return NewPostView;

    })(Backbone.View);
  }

}).call(this);
