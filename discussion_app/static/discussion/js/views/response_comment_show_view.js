// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentShowView = (function(_super) {
      __extends(ResponseCommentShowView, _super);

      function ResponseCommentShowView() {
        this.edit = __bind(this.edit, this);
        this._delete = __bind(this._delete, this);
        _ref = ResponseCommentShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ResponseCommentShowView.prototype.tagName = "li";

      ResponseCommentShowView.prototype.render = function() {
        this.template = _.template($("#response-comment-show-template").html());
        this.$el.html(this.template(_.extend({
          cid: this.model.cid,
          author_display: this.getAuthorDisplay()
        }, this.model.attributes)));
        this.delegateEvents();
        this.renderAttrs();
        this.$el.find(".timeago").timeago();
        this.convertMath();
        this.addReplyLink();
        return this;
      };

      ResponseCommentShowView.prototype.addReplyLink = function() {
        var html, name, p, _ref1;
        if (this.model.hasOwnProperty('parent')) {
          name = (_ref1 = this.model.parent.get('username')) != null ? _ref1 : gettext("anonymous");
          html = "<a href='#comment_" + this.model.parent.id + "'>@" + name + "</a>:  ";
          p = this.$('.response-body p:first');
          return p.prepend(html);
        }
      };

      ResponseCommentShowView.prototype.convertMath = function() {
        var body;
        body = this.$el.find(".response-body");
        body.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(body.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, body[0]]);
      };

      ResponseCommentShowView.prototype._delete = function(event) {
        return this.trigger("comment:_delete", event);
      };

      ResponseCommentShowView.prototype.edit = function(event) {
        return this.trigger("comment:edit", event);
      };

      return ResponseCommentShowView;

    })(DiscussionContentShowView);
  }

}).call(this);
